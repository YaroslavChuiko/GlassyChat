// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    //non nextAuth
    color    UserColor
    rooms    UserRoom[]
    messages Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Room {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    name      String     @unique // pusher chanel name max 164
    type      RoomType
    color     RoomColor
    messages  Message[]
    members   UserRoom[]
}

model UserRoom {
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
    user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    room      Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId    String
    role      RoomUserRole

    @@id([userId, roomId])
    @@index([userId])
    @@index([roomId])
}

model Message {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    content   String   @db.Text //? 
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId    String

    @@index([authorId])
    @@index([roomId])
}

enum RoomUserRole {
    MEMBER
    ADMIN
}

enum RoomType {
    PUBLIC
    PRIVATE
    GLOBAL // global chat room for all users 
}

enum RoomColor {
    ROOM_COLOR_1
    ROOM_COLOR_2
    ROOM_COLOR_3
    ROOM_COLOR_4
    ROOM_COLOR_5
}

enum UserColor {
    USER_COLOR_1
    USER_COLOR_2
    USER_COLOR_3
    USER_COLOR_4
    USER_COLOR_5
}
